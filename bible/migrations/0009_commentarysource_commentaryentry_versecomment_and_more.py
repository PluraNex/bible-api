# Generated by Django 4.2.7 on 2025-09-10 11:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("bible", "0008_canonicalbook_context_data_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="CommentarySource",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=120)),
                ("short_code", models.CharField(max_length=40, unique=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "language",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="commentary_sources",
                        to="bible.language",
                    ),
                ),
                (
                    "license",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="commentary_sources",
                        to="bible.license",
                    ),
                ),
            ],
            options={
                "db_table": "commentary_sources",
                "ordering": ["short_code"],
            },
        ),
        migrations.CreateModel(
            name="CommentaryEntry",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("chapter", models.PositiveIntegerField()),
                ("verse_start", models.PositiveIntegerField()),
                ("verse_end", models.PositiveIntegerField()),
                ("title", models.CharField(blank=True, max_length=200)),
                ("body_text", models.TextField()),
                ("body_html", models.TextField(blank=True, null=True)),
                (
                    "original_reference",
                    models.CharField(blank=True, help_text="Original reference format from source", max_length=100),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="commentary_entries",
                        to="bible.canonicalbook",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="entries", to="bible.commentarysource"
                    ),
                ),
            ],
            options={
                "db_table": "commentary_entries",
                "ordering": ["source", "book__canonical_order", "chapter", "verse_start"],
            },
        ),
        migrations.CreateModel(
            name="VerseComment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("comment", models.TextField()),
                (
                    "is_public",
                    models.BooleanField(default=False, help_text="Whether this comment is visible to other users"),
                ),
                ("is_favorite", models.BooleanField(default=False, help_text="User's favorite/starred comment")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="verse_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "verse",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="user_comments", to="bible.verse"
                    ),
                ),
            ],
            options={
                "db_table": "verse_comments",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["user", "created_at"], name="vcomment_user_created_idx"),
                    models.Index(fields=["verse", "is_public"], name="vcomment_verse_public_idx"),
                    models.Index(fields=["user", "is_favorite"], name="vcomment_user_favorite_idx"),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="versecomment",
            constraint=models.UniqueConstraint(
                fields=("verse", "user"),
                name="uniq_verse_user_comment",
                violation_error_message="User can only have one comment per verse",
            ),
        ),
        migrations.AddIndex(
            model_name="commentarysource",
            index=models.Index(fields=["language", "is_active"], name="commentary__languag_ea0093_idx"),
        ),
        migrations.AddIndex(
            model_name="commentarysource",
            index=models.Index(fields=["short_code"], name="commentary__short_c_b00d08_idx"),
        ),
        migrations.AddIndex(
            model_name="commentaryentry",
            index=models.Index(
                fields=["source", "book", "chapter", "verse_start", "verse_end"], name="commentary_entry_ref_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="commentaryentry",
            index=models.Index(fields=["book", "chapter"], name="commentary_book_chapter_idx"),
        ),
        migrations.AddConstraint(
            model_name="commentaryentry",
            constraint=models.UniqueConstraint(
                fields=("source", "book", "chapter", "verse_start", "verse_end"), name="uniq_commentary_source_ref"
            ),
        ),
        migrations.AddConstraint(
            model_name="commentaryentry",
            constraint=models.CheckConstraint(
                check=models.Q(("verse_end__gte", models.F("verse_start"))), name="commentary_end_gte_start"
            ),
        ),
        migrations.AddConstraint(
            model_name="commentaryentry",
            constraint=models.CheckConstraint(check=models.Q(("chapter__gte", 1)), name="commentary_chapter_pos"),
        ),
        migrations.AddConstraint(
            model_name="commentaryentry",
            constraint=models.CheckConstraint(
                check=models.Q(("verse_start__gte", 1)), name="commentary_verse_start_pos"
            ),
        ),
        migrations.AddConstraint(
            model_name="commentaryentry",
            constraint=models.CheckConstraint(check=models.Q(("verse_end__gte", 1)), name="commentary_verse_end_pos"),
        ),
    ]
