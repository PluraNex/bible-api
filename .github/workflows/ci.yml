name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

# Cancel previous runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source (PR-safe)
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies (pinned)
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Show tool versions
      run: |
        python -V
        black --version
        ruff --version

    - name: Check if Python files exist
      id: check_python
      run: |
        if find . -name "*.py" -not -path "./.git/*" | head -1 | grep -q .; then
          echo "python_files_exist=true" >> $GITHUB_OUTPUT
        else
          echo "python_files_exist=false" >> $GITHUB_OUTPUT
        fi

    - name: Run ruff linter
      if: steps.check_python.outputs.python_files_exist == 'true'
      run: ruff check . --output-format=github

    - name: Check black formatting
      if: steps.check_python.outputs.python_files_exist == 'true'
      run: |
        black --check . || (echo "Black formatting differences detected:" && black --diff . && exit 1)

    - name: Skip linting (no Python files)
      if: steps.check_python.outputs.python_files_exist == 'false'
      run: echo "No Python files found, skipping linting checks"

  migrations-check:
    name: Migrations Check
    runs-on: ubuntu-latest
    needs: lint-and-format
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: bible_pass
          POSTGRES_USER: bible_user
          POSTGRES_DB: bible_api
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout source (PR-safe)
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

    - name: Check if Django project exists
      id: check_django
      run: |
        if [ -f "manage.py" ]; then
          echo "django_exists=true" >> $GITHUB_OUTPUT
        else
          echo "django_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Python
      if: steps.check_django.outputs.django_exists == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      if: steps.check_django.outputs.django_exists == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Django system check
      if: steps.check_django.outputs.django_exists == 'true'
      env:
        DATABASE_URL: postgresql://bible_user:bible_pass@localhost:5432/bible_api
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: django-insecure-ci-key-for-testing-only
      run: python manage.py check --deploy

    - name: Check for missing migrations
      if: steps.check_django.outputs.django_exists == 'true'
      env:
        DATABASE_URL: postgresql://bible_user:bible_pass@localhost:5432/bible_api
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: django-insecure-ci-key-for-testing-only
      run: |
        python manage.py makemigrations --check --dry-run --verbosity=2

    - name: Apply migrations
      if: steps.check_django.outputs.django_exists == 'true'
      env:
        DATABASE_URL: postgresql://bible_user:bible_pass@localhost:5432/bible_api
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: django-insecure-ci-key-for-testing-only
      run: |
        python manage.py migrate --verbosity=2

    - name: Skip migrations check (Django not implemented yet)
      if: steps.check_django.outputs.django_exists == 'false'
      run: echo "Django project not implemented yet, skipping migrations check"

  tests:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: migrations-check
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: bible_pass
          POSTGRES_USER: bible_user
          POSTGRES_DB: bible_api
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout source (PR-safe)
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Check if tests directory exists
      id: check_tests
      run: |
        if [ -d "tests" ] && [ "$(find tests -name "*.py" | wc -l)" -gt 0 ]; then
          echo "tests_exist=true" >> $GITHUB_OUTPUT
        else
          echo "tests_exist=false" >> $GITHUB_OUTPUT
        fi

    - name: Install test dependencies
      if: steps.check_tests.outputs.tests_exist == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Apply migrations for tests
      if: steps.check_tests.outputs.tests_exist == 'true'
      env:
        DATABASE_URL: postgresql://bible_user:bible_pass@localhost:5432/bible_api
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: django-insecure-ci-key-for-testing-only
      run: |
        python manage.py migrate --verbosity=2

    - name: Run tests with coverage
      if: steps.check_tests.outputs.tests_exist == 'true'
      env:
        DATABASE_URL: postgresql://bible_user:bible_pass@localhost:5432/bible_api
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: django-insecure-ci-key-for-testing-only
      run: |
        pytest --cov=bible --cov=config --cov=common --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=80 -v

    - name: Upload coverage reports to Codecov
      if: steps.check_tests.outputs.tests_exist == 'true'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Upload coverage HTML report
      if: steps.check_tests.outputs.tests_exist == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

    - name: Skip tests (no test files found)
      if: steps.check_tests.outputs.tests_exist == 'false'
      run: echo "No test files found, skipping test execution"

  openapi-schema-check:
    name: OpenAPI Schema Check
    runs-on: ubuntu-latest
    needs: migrations-check
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: bible_pass
          POSTGRES_USER: bible_user
          POSTGRES_DB: bible_api
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Check if Django project exists
      id: check_django
      run: |
        if [ -f "manage.py" ]; then
          echo "django_exists=true" >> $GITHUB_OUTPUT
        else
          echo "django_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Python
      if: steps.check_django.outputs.django_exists == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      if: steps.check_django.outputs.django_exists == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install PyYAML

    - name: Apply migrations for schema
      if: steps.check_django.outputs.django_exists == 'true'
      env:
        DATABASE_URL: postgresql://bible_user:bible_pass@localhost:5432/bible_api
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: django-insecure-ci-key-for-testing-only
      run: |
        python manage.py migrate --verbosity=2

    - name: Generate OpenAPI schema
      if: steps.check_django.outputs.django_exists == 'true'
      env:
        DATABASE_URL: postgresql://bible_user:bible_pass@localhost:5432/bible_api
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: django-insecure-ci-key-for-testing-only
      run: |
        python manage.py spectacular --color --file schema.yml
        echo "OpenAPI schema generated successfully"

    - name: Validate OpenAPI schema
      if: steps.check_django.outputs.django_exists == 'true'
      run: |
        python -c "
        import yaml
        with open('schema.yml', 'r') as f:
            schema = yaml.safe_load(f)
        assert 'openapi' in schema, 'Missing openapi field'
        assert 'info' in schema, 'Missing info field'
        assert 'paths' in schema, 'Missing paths field'
        path_count = len(schema['paths'])
        assert path_count >= 5, f'Expected at least 5 endpoints, found {path_count}'
        print(f'✅ Schema validation passed: {path_count} endpoints found')
        "

    - name: Upload schema artifact
      if: steps.check_django.outputs.django_exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: openapi-schema
        path: schema.yml
        retention-days: 30

    - name: Skip schema check (Django not implemented yet)
      if: steps.check_django.outputs.django_exists == 'false'
      run: echo "Django project not implemented yet, skipping OpenAPI schema check"

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Check if Python files exist
      id: check_python
      run: |
        if find . -name "*.py" -not -path "./.git/*" | head -1 | grep -q .; then
          echo "python_files_exist=true" >> $GITHUB_OUTPUT
        else
          echo "python_files_exist=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Python
      if: steps.check_python.outputs.python_files_exist == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      if: steps.check_python.outputs.python_files_exist == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-django coverage

    - name: Run tests for SonarQube
      if: steps.check_python.outputs.python_files_exist == 'true'
      run: |
        if [ -d "tests" ] && [ "$(find tests -name "*.py" | wc -l)" -gt 0 ]; then
          pytest --cov=bible --cov=config --cov=common --cov-report=xml
        else
          echo "No tests found, creating empty coverage file"
          coverage run --source=bible,config,common -m pytest tests/ || true
          coverage xml
        fi

    - name: SonarQube Scan
      if: steps.check_python.outputs.python_files_exist == 'true'
      uses: sonarsource/sonarqube-quality-gate-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io

    - name: Skip SonarQube (no Python files)
      if: steps.check_python.outputs.python_files_exist == 'false'
      run: echo "No Python files found, skipping SonarQube analysis"
