name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Cancel previous runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black
    
    - name: Run ruff linter
      run: ruff check . --output-format=github
    
    - name: Check black formatting
      run: black --check .

  migrations-check:
    name: Migrations Check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: bible_pass
          POSTGRES_USER: bible_user
          POSTGRES_DB: bible_api
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check for pending migrations
      env:
        DATABASE_URL: postgresql://bible_user:bible_pass@localhost:5432/bible_api
      run: |
        python manage.py makemigrations --check --dry-run

  tests:
    name: Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: bible_pass
          POSTGRES_USER: bible_user
          POSTGRES_DB: bible_api
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://bible_user:bible_pass@localhost:5432/bible_api
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest --cov --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  openapi-schema-check:
    name: OpenAPI Schema Check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: bible_pass
          POSTGRES_USER: bible_user
          POSTGRES_DB: bible_api
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate OpenAPI schema
      env:
        DATABASE_URL: postgresql://bible_user:bible_pass@localhost:5432/bible_api
      run: |
        python manage.py spectacular --file docs/openapi-v1-generated.yaml
    
    - name: Check schema differences
      run: |
        if [ -f docs/openapi-v1.yaml ]; then
          if ! diff -u docs/openapi-v1.yaml docs/openapi-v1-generated.yaml; then
            echo "❌ OpenAPI schema differs from committed version!"
            echo "Run 'python manage.py spectacular --file docs/openapi-v1.yaml' and commit the changes."
            exit 1
          fi
        else
          echo "⚠️ No committed schema found. This is expected for initial setup."
          cp docs/openapi-v1-generated.yaml docs/openapi-v1.yaml
        fi
    
    - name: Upload schema artifact
      uses: actions/upload-artifact@v3
      with:
        name: openapi-schema
        path: docs/openapi-v1-generated.yaml